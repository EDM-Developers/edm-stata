name: Build and Test the EDM Stata Package

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:

  build-linux:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: x64
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
    - name: Build plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target edm_plugin
    - name: Install plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target install
    - name: Archive plugin
      uses: actions/upload-artifact@v2
      with:
        name: edm_Unix_x64.plugin
        path: ${{github.workspace}}/x64/bin/edm_Unix_x64.plugin
    - name: Archive ado file
      uses: actions/upload-artifact@v2
      with:
        name: edm.ado
        path: ${{github.workspace}}/x64/stata/edm.ado

  build-mac-arm:
    runs-on: macos-11
    steps:
    - name: Checkout a copy to compile for ARM
      uses: actions/checkout@v2
      with:
        path: arm
    - name: Configure CMake
      working-directory: ${{github.workspace}}/arm
      run: ARMMODE=1 VCPKG_TARGET_TRIPLET=arm64-osx cmake -B build -DCMAKE_BUILD_TYPE=Release
    - name: Build plugin
      working-directory: ${{github.workspace}}/arm
      run: cmake --build build --target edm_plugin
    - name: Install plugin
      working-directory: ${{github.workspace}}/arm
      run: cmake --build build --target install
    - name: Check binary is the right type
      working-directory: ${{github.workspace}}/arm/test
      run: lipo -archs ./edm.plugin
    - name: Archive plugin
      uses: actions/upload-artifact@v2
      with:
        name: edm_MacOSX_arm.plugin
        path: ${{github.workspace}}/arm/bin/edm_MacOSX_arm.plugin

  build-mac-x64:
    runs-on: macos-11
    steps:
    - name: Checkout a copy to compile for x86
      uses: actions/checkout@v2
      with:
        path: x64
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
    - name: Build plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target edm_plugin
    - name: Install plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target install
    - name: Check binary is the right type
      working-directory: ${{github.workspace}}/x64/test
      run: lipo -archs ./edm.plugin
    - name: Archive plugin
      uses: actions/upload-artifact@v2
      with:
        name: edm_MacOSX_x64.plugin
        path: ${{github.workspace}}/x64/bin/edm_MacOSX_x64.plugin

  build-windows:
    runs-on: windows-2019
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: x64
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: cmake -B build
    - name: Build plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --config Release --target edm_plugin
    - name: Install plugin
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --config Release --target install
    - name: Archive plugin
      uses: actions/upload-artifact@v2
      with:
        name: edm_Windows_x64.plugin
        path: ${{github.workspace}}/x64/bin/edm_Windows_x64.plugin

  int-test-linux:
    runs-on: ubuntu-20.04
    needs: build-linux
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: EDM
    - name: Get the ado file for the package
      uses: actions/download-artifact@v2
      with:
        name: edm.ado
    - name: Get the compiled plugin for Linux
      uses: actions/download-artifact@v2
      with:
        name: edm_Unix_x64.plugin
    - name: Check that download worked
      run: ls
    - name: Prepare for Stata docker
      run: |
        mkdir code
        mkdir results
        mv edm.ado code
        mv edm_Unix_x64.plugin code/edm.plugin
        mv EDM/test/ci-test.do code
        chmod 777 code
        echo ${{ secrets.STATA_LICENSE }} > stata.lic
    - name: Try the Stata docker image
      run: |
        docker run --rm \
          -v $(pwd)/stata.lic:/usr/local/stata/stata.lic \
          -v $(pwd)/code:/code \
          -v $(pwd)/data:/data \
          -v $(pwd)/results:/results \
          dataeditors/stata17:2021-12-16 -e -q ci-test.do
    - name: Check test results
      run: diff -B EDM/test/ci-test.log code/ci-test.log

  unit-test-asan-linux:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: x64
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug
    - name: Build unit tests with address sanitizer
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target edm_test
    # - name: Build CLI with address sanitizer
    #   working-directory: ${{github.workspace}}/x64
    #   run: cmake --build build --target edm_cli --parallel 8
    - name: Install unit tests
      working-directory: ${{github.workspace}}/x64
      run: cp build/edm_test test
    # - name: Install CLI
    #   working-directory: ${{github.workspace}}/x64
    #   run: cp build/edm_cli test
    - name: Run unit tests with address sanitizer
      working-directory: ${{github.workspace}}/x64/test
      run: ./edm_test
    # - name: Run CLI test with address sanitizer
    #   working-directory: ${{github.workspace}}/x64/test
    #   run: ./edm_cli ci-test.json

  # int-test-mac-arm:
  #   runs-on: macos
  #   needs: build-mac-arm
  #   steps:
  #   - name: Prepare integration test
  #     working-directory: ${{github.workspace}}/arm/test
  #     run: mv ci-test.log reference.log
  #   - name: Run integration test
  #     working-directory: ${{github.workspace}}/arm/test
  #     run: env /usr/bin/arch -arm64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q ci-test.do Euclidean
  #   - name: Check test results
  #     working-directory: ${{github.workspace}}/arm/test
  #     run: diff -B reference.log ci-test.log

  # unit-test-asan-mac-arm:
  #   runs-on: macos-11
  #   steps:
  #   - name: Checkout a copy to compile for ARM
  #     uses: actions/checkout@v2
  #     with:
  #       path: arm
  #   - name: Configure CMake
  #     working-directory: ${{github.workspace}}/arm
  #     run: cmake -B build -DCMAKE_BUILD_TYPE=Debug
  #   - name: Build unit tests with address sanitizer
  #     working-directory: ${{github.workspace}}/arm
  #     run: cmake --build build --target edm_test --parallel 8
  #   - name: Build CLI with address sanitizer
  #     working-directory: ${{github.workspace}}/arm
  #     run: cmake --build build --target edm_cli --parallel 8
  #   - name: Install unit tests
  #     working-directory: ${{github.workspace}}/arm
  #     run: cp build/edm_test test
  #   - name: Install CLI
  #     working-directory: ${{github.workspace}}/arm
  #     run: cp build/edm_cli test
  #   - name: Run unit tests with address sanitizer
  #     working-directory: ${{github.workspace}}/arm/test
  #     run: ./edm_test
  #   # - name: Run CLI test with address sanitizer
  #   #   working-directory: ${{github.workspace}}/arm/test
  #   #   run: ./edm_cli ci-test.json

  # int-test-mac-x64:
  #   runs-on: macos
  #   needs: build-mac-x64
  #   steps:
  #   - name: Prepare integration test
  #     working-directory: ${{github.workspace}}/x64/test
  #     run: mv ci-test.log reference.log
  #   - name: Run integration test
  #     working-directory: ${{github.workspace}}/x64/test
  #     run: env /usr/bin/arch -x86_64 /Applications/Stata/StataMP.app/Contents/MacOS/StataMP -e -q ci-test.do Euclidean
  #   - name: Check test results
  #     working-directory: ${{github.workspace}}/x64/test
  #     run: diff -B reference.log ci-test.log

  unit-test-asan-mac-x64:
    runs-on: macos-11
    steps:
    - name: Checkout a copy to compile for x86
      uses: actions/checkout@v2
      with:
        path: x64
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug
    - name: Build unit tests with address sanitizer
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --target edm_test
    # - name: Build CLI with address sanitizer
    #   working-directory: ${{github.workspace}}/x64
    #   run: cmake --build build --target edm_cli --parallel 8
    - name: Install unit tests
      working-directory: ${{github.workspace}}/x64
      run: cp build/edm_test test
    # - name: Install CLI
    #   working-directory: ${{github.workspace}}/x64
    #   run: cp build/edm_cli test
    - name: Run unit tests with address sanitizer
      working-directory: ${{github.workspace}}/x64/test
      run: ./edm_test
    # - name: Run CLI test with address sanitizer
    #   working-directory: ${{github.workspace}}/x64/test
    #   run: ./edm_cli ci-test.json

  # int-test-windows:
  #   runs-on: windows
  #   needs: build-windows
  #   steps:
  #   - name: Prepare integration test
  #     working-directory: ${{github.workspace}}/x64/test
  #     run: mv ci-test.log reference.log
  #   - name: Run integration test
  #     working-directory: ${{github.workspace}}/x64/test
  #     run: cmd.exe /c "C:\Program Files\Stata17\StataMP-64.exe" -e -q ci-test.do Euclidean
  #   - name: Check test results
  #     working-directory: ${{github.workspace}}/x64/test
  #     run: cmd.exe /c "fc /W reference.log ci-test.log"

  unit-test-asan-windows:
    runs-on: windows-2022
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: x64
    - name: Configure CMake
      working-directory: ${{github.workspace}}/x64
      run: cmake -B build
    - name: Build unit tests (todo -- need to get Debug version working here)
      working-directory: ${{github.workspace}}/x64
      run: cmake --build build --config Release --target edm_test
    # - name: Build CLI with address sanitizer
      # working-directory: ${{github.workspace}}/x64
      # run: cmake --build build --config Debug --target edm_cli
    # - name: Install unit tests
    #   working-directory: ${{github.workspace}}/x64
    #   run: cp build/Release/edm_test.exe test
    # - name: Install CLI
    #   working-directory: ${{github.workspace}}/x64
    #   run: cp build/Debug/edm_cli.exe test
    - name: Run unit tests (from Release dir, as Catch2 now has .dlls)
      working-directory: ${{github.workspace}}/x64/build/Release
      run: .\edm_test.exe
    # - name: Run CLI test with address sanitizer
    #   working-directory: ${{github.workspace}}/x64/test
    #   run: .\edm_cli.exe ci-test.json

  build-gpu-linux:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: gpu
    - uses: Jimver/cuda-toolkit@v0.2.5
      id: cuda-toolkit
      with:
        cuda: '11.5.1'
    - name: Install ArrayFire
      working-directory: ${{github.workspace}}/gpu
      run: |
        wget --quiet https://arrayfire.s3.amazonaws.com/3.8.0/ArrayFire-v3.8.0_Linux_x86_64.sh
        chmod +x ./ArrayFire-v3.8.0_Linux_x86_64.sh
        ./ArrayFire-v3.8.0_Linux_x86_64.sh --skip-license --include-subdir --prefix=/opt
        ls /opt
    - name: Configure CMake
      working-directory: ${{github.workspace}}/gpu
      run: |
        export AF_PATH=/opt/arrayfire
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${AF_PATH}/lib64
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DEDM_WITH_ARRAYFIRE=ON -DArrayFire_DIR=/opt/arrayfire/cmake
    - name: Build plugin
      working-directory: ${{github.workspace}}/gpu
      run: cmake --build build --target edm_plugin
    - name: Install plugin
      working-directory: ${{github.workspace}}/gpu
      run: cmake --build build --target install
    - name: Archive plugin
      uses: actions/upload-artifact@v2
      with:
        name: edm_Unix_x64_gpu.plugin
        path: ${{github.workspace}}/gpu/bin/edm_Unix_x64_gpu.plugin

  build-gpu-windows:
    runs-on: windows-2019
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        path: gpu
    - uses: Jimver/cuda-toolkit@v0.2.5
      id: cuda-toolkit
      with:
        cuda: '11.5.1'
    - name: Get ArrayFire
      run: curl https://arrayfire.s3.amazonaws.com/3.8.0/ArrayFire-v3.8.0-CUDA-11.2.exe --output ArrayFire-v3.8.0-CUDA-11.2.exe
    - name: Unpack ArrayFire
      run:  7z x .\ArrayFire-v3.8.0-CUDA-11.2.exe -oarrayfire
    - name: Configure CMake
      working-directory: ${{github.workspace}}/gpu
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DEDM_WITH_ARRAYFIRE=ON -DArrayFire_DIR=${{github.workspace}}/arrayfire/cmake
    - name: Build plugin
      working-directory: ${{github.workspace}}/gpu
      run: cmake --build build --config Release --target edm_plugin
    - name: Install plugin
      working-directory: ${{github.workspace}}/gpu
      run: cmake --build build --config Release --target install
    - name: Archive plugin
      uses: actions/upload-artifact@v2
      with:
        name: edm_Windows_x64_gpu.plugin
        path: ${{github.workspace}}/gpu/bin/edm_Windows_x64_gpu.plugin
